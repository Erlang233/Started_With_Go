package main

import "fmt"

func main() {
    fmt.Println("Hello, 世界")

    fmt.Println(1 +
    3) // 这是legal的

    // fmt.Println(1
    // + 3) 是不 legal的
}

// Go 是一门编译型语言，Go 语言的工具链将源代码及其依赖转换成计算机的机器指令

// go 命令有一系列子命令。最简单的一个子命令就是 run。这个命令编译一个或多个以。.go 结尾的源文件，链接库文件，并运行最终生成的可执行文件。

// go build会生成一个可执行的二进制文件，可以直接在terminal中运行

// 现在直接run go get在一个没有mod 文件的package中会报错，因为现在go get只负责添加dependency

/*
Go 语言的代码通过包（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。
一个包由位于单个目录下的一个或多个 .go 源代码文件组成，目录定义包的作用。
每个源文件都以一条 package 声明语句开始，这个例子里就是 package main，表示该文件属于哪个包，
紧跟着一系列导入（import）的包，之后是存储在这个文件里的程序语句。

main 包比较特殊。它定义了一个独立可执行的程序，而不是一个库。
在 main 里的 main 函数也很特殊，它是整个程序执行时的入口（译注：C 系语言差不多都这样）。main 函数所做的事情就是程序做的。
当然了，main 函数一般调用其它包里的函数完成很多工作（如：fmt.Println）。

必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。

import 声明必须跟在文件的 package 声明之后。随后，则是组成程序的函数、变量、常量、类型的声明语句

Go 语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。
实际上，编译器会主动把特定符号后的换行符转换为分号，因此换行符添加的位置会影响 Go 代码的正确解析

Go 语言在代码格式上采取了很强硬的态度。gofmt工具把代码格式化为标准格式
*/

